// <auto-generated />
using System;
using Educative.Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Educative.Infrastructure.Data.Migrations
{
    [DbContext(typeof(EducativeContext))]
    partial class EducativeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.5");

            modelBuilder.Entity("Educative.Core.Entity.Address", b =>
                {
                    b.Property<string>("AddressID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Add2")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Addr1")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentAddressID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AddressID");

                    b.HasIndex("StudentAddressID")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Educative.Core.Entity.Course", b =>
                {
                    b.Property<string>("CourseID")
                        .HasColumnType("TEXT");

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CourseTopic")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("CourseTutor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.HasKey("CourseID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Educative.Core.Entity.Student", b =>
                {
                    b.Property<string>("StudentID")
                        .HasColumnType("TEXT");

                    b.Property<int>("Attendance")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<char?>("MiddlenameInitial")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("StudentID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Educative.Core.Entity.StudentCourse", b =>
                {
                    b.Property<string>("StudentID")
                        .HasColumnType("TEXT");

                    b.Property<string>("CourseID")
                        .HasColumnType("TEXT");

                    b.HasKey("StudentID", "CourseID");

                    b.HasIndex("CourseID");

                    b.ToTable("StudentCourses");
                });

            modelBuilder.Entity("Educative.Core.Entity.Address", b =>
                {
                    b.HasOne("Educative.Core.Entity.Student", "Student")
                        .WithOne("Address")
                        .HasForeignKey("Educative.Core.Entity.Address", "StudentAddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Educative.Core.Entity.StudentCourse", b =>
                {
                    b.HasOne("Educative.Core.Entity.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Educative.Core.Entity.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Educative.Core.Entity.Course", b =>
                {
                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("Educative.Core.Entity.Student", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("StudentCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
